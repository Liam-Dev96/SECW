{
  "README.html": {
    "href": "README.html",
    "title": "SECW | SECW",
    "summary": "SECW which documentation tool are we moving forward with? I think it may be best to use Docfx due to its auto gernerative html documents from xml comments instead of the alternatives such as sandcastle (which is a tad bit too old) or doxygen (compatible with diffrent langauges). #I already installed Docfx on my device using \"dotnet tool install -g docfx\" #and we can simply comment the desired descriptive sections using // and invoke its use with docfx build which as the document says should create the html file automatically in the _site folder. as for presentation am not too sure if it adds any styling or css but a simple document should suffice. #Used command \"dotnet list package --include-transitive > packages.txt\" #(to update packages.txt run this command once more.) in order to create a file similar to Requiremnts, to store all packages and Dependancies needed to be installed for this specific application to run. the database helper is coded in C# and it includes a prototype of the required tables along side multiple comments to explain what each section does. Validation libraries, login and sign up related related information for email validation I plan to use the built in System.ComponentModel.DataAnnotations. for password validation I plan to use Bcrypt. will also need to update the dependencies or packages.txt folder after successfuly installing bcrypt... Dependancies have been updated. #Due to my assigned tasks including the creation of the db and login I also took it upon myself to create the other tables and columns required for the completion of the application to ensure that the application runs, you firstly need to download the dependencies for sqllite. list of commands dotnet clean Functionality: Cleans the project by removing all compiled files (e.g., bin and obj folders). Use Case: To ensure a fresh build by removing old or cached files. I also deleted the bin and obj file from the previous demo project the click counter. dotnet workload update Functionality: Updates all installed .NET workloads to their latest versions. Use Case: To ensure that all workloads (e.g., Android, iOS, etc.) are up to date. dotnet add package Microsoft.Data.Sqlite Functionality: Adds the Microsoft.Data.Sqlite NuGet package to the project. Use Case: To use SQLite in a cross-platform manner, especially for .NET MAUI projects. dotnet workload install android Functionality: Installs the Android workload for .NET MAUI development. Use Case: To enable building and running the project on Android devices. dotnet list package --include-transitive > packages.txt Functionality: Lists all the NuGet packages (including transitive dependencies) used in the project and saves the output to a file named packages.txt. Use Case: To document all dependencies required for the project. docfx build Functionality: Builds the documentation using Docfx and generates the output in the _site folder. Use Case: To create HTML documentation for your project based on XML comments. just testing to see if the auto document features work as expected or not."
  },
  "docs/AdminPage.html": {
    "href": "docs/AdminPage.html",
    "title": "Admin Page Documentation | SECW",
    "summary": "Admin Page Documentation This document provides an overview of the Admin.xaml.cs page, its functionality, and key components. Overview The Admin.xaml.cs file is the code-behind for the Admin Page in the application. It handles the logic and interactions for the Admin interface, including user management, settings, and other administrative tasks. Key Features User Management: Add, edit, and delete users. Settings Management: Update application settings. Data Handling: Load and save data to the database or other storage. Code Structure Namespaces The file includes the following namespaces: System System.Windows System.Windows.Controls System.Linq System.Collections.Generic Main Components Constructor Initializes the Admin Page and sets up event handlers. public Admin() { InitializeComponent(); // Additional initialization code } Event Handlers Handles user interactions such as button clicks. private void AddUserButton_Click(object sender, RoutedEventArgs e) { // Code to add a new user } Helper Methods Contains utility functions for data validation, loading, and saving. private void LoadUsers() { // Code to load user data } UI Interaction The Admin.xaml.cs file interacts with the Admin.xaml file, which defines the UI layout. Key UI elements include: Buttons for user actions (e.g., Add, Edit, Delete). DataGrid for displaying user information. TextBoxes for input fields. Example Workflow Loading Users When the page loads, the LoadUsers method is called to populate the user list. Adding a User Clicking the \"Add User\" button triggers the AddUserButton_Click event, which validates input and updates the data source. Editing/Deleting Users Similar event handlers manage editing and deleting users. Notes Ensure proper error handling for all user actions. Follow security best practices when managing user data. For further details, refer to the inline comments in the Admin.xaml.cs file."
  },
  "docs/AdminSettingsPage.html": {
    "href": "docs/AdminSettingsPage.html",
    "title": "| SECW",
    "summary": "\"# Admin Settings Page\" Overview The Admin Settings Page allows administrators to configure application settings. This page is implemented using the AdminSettings.xaml and its code-behind file AdminSettings.xaml.cs. Key Features User Management: Add, edit, or remove users. Configuration Settings: Update application-wide settings such as themes, permissions, and notifications. Audit Logs: View and manage system logs for tracking changes. XAML Structure The AdminSettings.xaml defines the UI layout, including: Header Section: Displays the page title and navigation options. Settings Form: Contains input fields, dropdowns, and toggles for configuration. Action Buttons: Includes \"Save\", \"Cancel\", and \"Reset to Default\" buttons. Example XAML Snippet <StackPanel> <TextBlock Text=\"Admin Settings\" FontSize=\"24\" FontWeight=\"Bold\" /> <TextBox x:Name=\"SettingInput\" PlaceholderText=\"Enter setting value\" /> <Button Content=\"Save\" Click=\"SaveButton_Click\" /> </StackPanel> Code-Behind Functionality The AdminSettings.xaml.cs handles the logic for user interactions, such as: Saving Settings: Validates and saves changes to the database or configuration file. Resetting Settings: Restores default values. Error Handling: Displays error messages for invalid inputs. Example Code-Behind Snippet private void SaveButton_Click(object sender, RoutedEventArgs e) { string settingValue = SettingInput.Text; if (string.IsNullOrEmpty(settingValue)) { MessageBox.Show(\"Setting value cannot be empty.\"); return; } SaveSetting(settingValue); MessageBox.Show(\"Settings saved successfully.\"); } private void SaveSetting(string value) { // Logic to save the setting } Additional Notes Ensure proper validation for all inputs. Use binding and MVVM patterns for better maintainability. Test thoroughly to avoid breaking changes in critical settings. Follow accessibility guidelines for UI components. Log all changes for audit purposes."
  },
  "docs/EditUserPage.html": {
    "href": "docs/EditUserPage.html",
    "title": "| SECW",
    "summary": "\"# Edit User Page\" Overview The Edit User Page allows administrators to modify user details such as name, email, and role. This page is part of the user management system. Features Update user information. Assign or change user roles. Validate input fields to ensure data integrity. How to Use Navigate to the Edit User Page. Select the user you want to edit. Modify the necessary fields. Click the \"Save\" button to apply changes. Example <form> <label for=\"username\">Username:</label> <input type=\"text\" id=\"username\" name=\"username\" value=\"JohnDoe\" /> <label for=\"email\">Email:</label> <input type=\"email\" id=\"email\" name=\"email\" value=\"johndoe@example.com\" /> <label for=\"role\">Role:</label> <select id=\"role\" name=\"role\"> <option value=\"admin\">Admin</option> <option value=\"editor\">Editor</option> <option value=\"viewer\">Viewer</option> </select> <button type=\"submit\">Save</button> </form> Notes Ensure all fields are filled out correctly before saving. Changes take effect immediately after saving. Only users with administrative privileges can access this page."
  },
  "docs/EnvironmentalScientistPage.html": {
    "href": "docs/EnvironmentalScientistPage.html",
    "title": "| SECW",
    "summary": "\"# Environmental Scientist Page\" This page provides an overview of the Environmental Scientist interface in the application. It is designed to display relevant data and allow user interactions for managing environmental science-related tasks. Features Data Display: Presents information such as environmental metrics, reports, and analysis. User Interaction: Includes buttons and controls for submitting data, generating reports, and navigating through different sections. Dynamic Updates: Automatically refreshes data when changes occur. Code Integration XAML Structure The XAML file defines the layout and UI components of the page. Key elements include: Grid Layout: Organizes the page into sections. TextBlocks: Display static text such as titles and labels. Buttons: Allow user actions like submitting or navigating. ListView: Displays lists of data dynamically. XAML.CS Logic The .xaml.cs file contains the logic for handling user interactions and data binding. Key functionalities include: Event Handlers: Respond to button clicks and other user actions. Data Binding: Connects UI elements to the underlying data model. Navigation: Handles transitions between pages. Usage Navigate to the Environmental Scientist Page in the application. Interact with the UI components to view or manage data. Use the provided buttons to perform actions like submitting data or generating reports. Notes Ensure the data source is properly configured for dynamic updates. Customize the XAML layout to fit specific project requirements. For more details, refer to the corresponding .xaml and .xaml.cs files in the project repository."
  },
  "docs/Login.html": {
    "href": "docs/Login.html",
    "title": "| SECW",
    "summary": "Overview The Login Page is a user interface that allows users to authenticate themselves by providing their credentials. It consists of a username and password input field, along with a login button. XAML Structure The XAML file defines the layout and visual elements of the Login Page. Below is a summary of its key components: TextBox for Username: Allows the user to input their username. PasswordBox for Password: Provides a secure way to input the password. Button for Login: Triggers the authentication process when clicked. Example XAML Code <StackPanel> <TextBlock Text=\"Username\" /> <TextBox x:Name=\"UsernameTextBox\" /> <TextBlock Text=\"Password\" /> <PasswordBox x:Name=\"PasswordBox\" /> <Button Content=\"Login\" Click=\"LoginButton_Click\" /> </StackPanel> Code-Behind (.xaml.cs) The code-behind file contains the logic for handling user interactions. For example, the LoginButton_Click event is triggered when the login button is clicked. Example Code-Behind private void LoginButton_Click(object sender, RoutedEventArgs e) { string username = UsernameTextBox.Text; string password = PasswordBox.Password; if (AuthenticateUser(username, password)) { // Navigate to the next page or show success message } else { // Show error message } } private bool AuthenticateUser(string username, string password) { // Replace with actual authentication logic return username == \"admin\" && password == \"password\"; } Notes Ensure proper validation and error handling for user inputs. Avoid hardcoding credentials; use secure authentication mechanisms. Consider implementing encryption for sensitive data like passwords. Follow accessibility guidelines for UI elements. Test the login functionality thoroughly to ensure reliability. Use MVVM pattern for better separation of concerns if applicable. Replace placeholder authentication logic with a secure backend service. Conclusion The Login Page is a critical component of the application, providing a secure entry point for users. Proper implementation and testing are essential to ensure a seamless and secure user experience."
  },
  "docs/ManageUsers.html": {
    "href": "docs/ManageUsers.html",
    "title": "| SECW",
    "summary": "\"# Manage Users Page\" The Manage Users Page allows administrators to view, add, edit, and delete user accounts within the system. Below is an overview of the key functionalities and their implementation details. Features View Users: Displays a list of all registered users in a table format. Add User: Provides a form to input details for creating a new user. Edit User: Allows modification of existing user details. Delete User: Enables the removal of user accounts. Implementation Details XAML Structure The ManageUsers.xaml file defines the UI layout using XAML. Key components include: A DataGrid for displaying the list of users. Buttons for \"Add\", \"Edit\", and \"Delete\" actions. A Popup or Dialog for user input when adding or editing users. Code-Behind Logic The ManageUsers.xaml.cs file contains the event handlers and logic for user interactions: Loading Users: Fetches user data from the database and binds it to the DataGrid. Add User: Opens a dialog for input, validates the data, and saves it to the database. Edit User: Pre-fills the dialog with selected user data, validates changes, and updates the database. Delete User: Confirms the action and removes the user from the database. Example Code Snippets XAML <DataGrid x:Name=\"UsersDataGrid\" AutoGenerateColumns=\"False\"> <DataGrid.Columns> <DataGridTextColumn Header=\"Username\" Binding=\"{Binding Username}\" /> <DataGridTextColumn Header=\"Email\" Binding=\"{Binding Email}\" /> <DataGridTextColumn Header=\"Role\" Binding=\"{Binding Role}\" /> </DataGrid.Columns> </DataGrid> <Button Content=\"Add User\" Click=\"AddUser_Click\" /> <Button Content=\"Edit User\" Click=\"EditUser_Click\" /> <Button Content=\"Delete User\" Click=\"DeleteUser_Click\" /> Code-Behind private void AddUser_Click(object sender, RoutedEventArgs e) { var addUserDialog = new AddUserDialog(); if (addUserDialog.ShowDialog() == true) { // Save new user to database LoadUsers(); } } private void EditUser_Click(object sender, RoutedEventArgs e) { if (UsersDataGrid.SelectedItem is User selectedUser) { var editUserDialog = new EditUserDialog(selectedUser); if (editUserDialog.ShowDialog() == true) { // Update user in database LoadUsers(); } } } private void DeleteUser_Click(object sender, RoutedEventArgs e) { if (UsersDataGrid.SelectedItem is User selectedUser) { // Confirm and delete user LoadUsers(); } } Conclusion The Manage Users Page provides a user-friendly interface for managing user accounts. The combination of XAML for UI and C# for logic ensures a seamless experience for administrators."
  },
  "docs/OperationalManagerPage.html": {
    "href": "docs/OperationalManagerPage.html",
    "title": "Operational Manager Page | SECW",
    "summary": "Operational Manager Page This page provides an overview of the Operational Manager interface, detailing its functionality and structure. Below is a breakdown of the key components and their roles: XAML Structure The XAML file defines the layout and visual elements of the Operational Manager Page. It includes: Header Section: Displays the title and navigation controls. Main Content Area: Contains the primary UI elements such as data grids, buttons, and input fields. Footer Section: Provides additional information or actions. Example XAML Snippet <Window x:Class=\"Namespace.OperationalManagerPage\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" Title=\"Operational Manager Page\" Height=\"450\" Width=\"800\"> <Grid> <!-- Define UI elements here --> </Grid> </Window> Code-Behind (.xaml.cs) The .xaml.cs file contains the logic and event handlers for the Operational Manager Page. It interacts with the UI elements defined in the XAML file and implements the business logic. Key Features Event Handling: Responds to user interactions such as button clicks or data input. Data Binding: Connects the UI elements to the underlying data models. Navigation: Manages transitions between different pages or views. Example Code-Behind Snippet using System.Windows; namespace Namespace { public partial class OperationalManagerPage : Window { public OperationalManagerPage() { InitializeComponent(); } private void OnButtonClick(object sender, RoutedEventArgs e) { // Handle button click event } } } Summary The Operational Manager Page combines a well-structured XAML layout with robust code-behind logic to deliver a seamless user experience. Customize the XAML and .xaml.cs files to meet specific operational requirements."
  }
}